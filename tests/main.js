// Generated by CoffeeScript 1.8.0
(function() {
  var app, checkDir, cl, err, express, fs, mSettings, path, request, res, _ref, _ref1, _ref2;

  cl = console.log;

  fs = require('fs');

  request = require('sync-request');

  express = require('express');

  cl(typeof process !== "undefined" && process !== null ? (_ref = process.env) != null ? _ref._mSettings_DMS_URL : void 0 : void 0);

  cl(typeof process !== "undefined" && process !== null ? (_ref1 = process.env) != null ? _ref1._mSettings_AGENT_URL : void 0 : void 0);

  mSettings = (function() {
    var obj, _ref2, _ref3;
    return obj = {
      DMS_URL: typeof process !== "undefined" && process !== null ? (_ref2 = process.env) != null ? _ref2._mSettings_DMS_URL : void 0 : void 0,
      AGENT_URL: typeof process !== "undefined" && process !== null ? (_ref3 = process.env) != null ? _ref3._mSettings_AGENT_URL : void 0 : void 0,
      setting: null
    };
  })();

  while (!mSettings.setting) {
    try {
      res = request("POST", "" + mSettings.DMS_URL + "/getAgentSetting", {
        json: {
          AGENT_URL: mSettings.AGENT_URL
        }
      });
      mSettings.setting = JSON.parse(res.getBody('utf8'));
    } catch (_error) {
      err = _error;
      cl(err);
    }
  }

  path = mSettings.setting.소멸정보절대경로;

  fs.access("" + path + "/err", fs.F_OK, function(err) {
    var errno;
    if (((errno = err != null ? err.errno : void 0) != null) && errno === -2) {
      return fs.mkdirSync("" + path + "/err");
    }
  });

  checkDir = (function(_this) {
    return function() {
      var files;
      files = fs.readdirSync(path);
      files = files.filter(function(file) {
        if (file.substring(file.length - 3, file.length) === 'das') {
          return true;
        } else {
          return false;
        }
      });
      return files.forEach(function(file) {
        var dasInfo;
        try {
          dasInfo = fs.readFileSync("" + path + "/" + file, 'utf-8');
          try {
            res = request("POST", "" + mSettings.DMS_URL + "/insertDAS", {
              json: {
                dasInfo: dasInfo,
                AGENT_URL: mSettings.AGENT_URL
              }
            });
            if (res.getBody('utf8') !== 'success') {
              fs.rename("" + path + "/" + file, "" + path + "/err/" + file);
            }
            return fs.unlinkSync("" + path + "/" + file);
          } catch (_error) {
            err = _error;
            cl(err);
            try {
              return fs.rename("" + path + "/" + file, "" + path + "/err/" + file);
            } catch (_error) {
              err = _error;
              return cl(err);
            }
          }
        } catch (_error) {
          err = _error;
          if (err) {
            cl(err);
            try {
              return fs.rename("" + path + "/" + file, "" + path + "/err/" + file);
            } catch (_error) {
              err = _error;
              return cl(err);
            }
          }
        }
      });
    };
  })(this);

  checkDir();

  setInterval(function() {
    return checkDir();
  }, 1000 * 1);

  app = express();

  app.use(express.bodyParser());

  app.post('/removeFiles', function(req, res) {
    var data;
    data = req.body;
    res.type('text/plain');
    try {
      data.DEL_FILE_LIST.forEach(function(path) {
        return fs.unlinkSync(path);
      });
      return res.send('success');
    } catch (_error) {
      err = _error;
      cl(err.message);
      return res.send(err.message);
    }
  });

  app.listen((typeof process !== "undefined" && process !== null ? (_ref2 = process.env) != null ? _ref2.PORT : void 0 : void 0) || 3000);

}).call(this);
